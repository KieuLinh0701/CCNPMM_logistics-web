'use strict';

module.exports = {
  async up(queryInterface, Sequelize) {
    // üü© Th√™m c·ªôt officeId
    await queryInterface.addColumn('Transactions', 'officeId', {
      type: Sequelize.INTEGER,
      allowNull: true,
      references: {
        model: 'Offices',
        key: 'id',
      },
      onUpdate: 'CASCADE',
      onDelete: 'SET NULL',
    });

    // üü© Th√™m c·ªôt purpose
    await queryInterface.addColumn('Transactions', 'purpose', {
      type: Sequelize.ENUM(
        'Refund',          // Ho√†n ti·ªÅn cho kh√°ch h√†ng
        'CODReturn',       // Tr·∫£ ti·ªÅn COD v·ªÅ cho shop
        'ShippingService', // Thanh to√°n ph√≠ d·ªãch v·ª• v·∫≠n chuy·ªÉn
        'OfficeExpense',   // Chi ph√≠ n·ªôi b·ªô vƒÉn ph√≤ng
        'RevenueTransfer'  // Chuy·ªÉn doanh thu l√™n t·ªïng
      ),
      allowNull: false,
      defaultValue: 'ShippingService',
      comment: 'M·ª•c ƒë√≠ch c·ªßa giao d·ªãch',
    });

    // üüß N·∫øu c·ªôt method c√≥ ENUM c≈© c·∫ßn m·ªü r·ªông / gi·ªõi h·∫°n l·∫°i
    await queryInterface.changeColumn('Transactions', 'method', {
      type: Sequelize.ENUM('Cash', 'VNPay'),
      allowNull: false,
      comment: 'Ph√¢n lo·∫°i ngu·ªìn ti·ªÅn',
    });
  },

  async down(queryInterface, Sequelize) {
    // üü• X√≥a c·ªôt officeId
    await queryInterface.removeColumn('Transactions', 'officeId');

    // üü• X√≥a c·ªôt purpose v√† enum c·ªßa n√≥
    await queryInterface.removeColumn('Transactions', 'purpose');
    await queryInterface.sequelize.query('DROP TYPE IF EXISTS "enum_Transactions_purpose";');

    // üü• Rollback c·ªôt method v·ªÅ ƒë·ªãnh nghƒ©a c≈© (n·∫øu c·∫ßn)
    await queryInterface.changeColumn('Transactions', 'method', {
      type: Sequelize.ENUM('Cash', 'VNPay', 'Refund'),
      allowNull: false,
      comment: 'ph√¢n lo·∫°i ngu·ªìn ti·ªÅn ho·∫∑c l√Ω do chi ti√™u',
    });
  },
};