import React, { useEffect, useState, useRef } from "react";
import { Form, Input, Select } from "antd";
import axios from "axios";

const { Option } = Select;

interface Province {
  code: number;
  name: string;
}

interface Commune {
  code: number;
  name: string;
}

interface AddressFormProps {
  form: any;
  prefix: string;  
  initialCity?: number;
  initialWard?: number;
  initialDetail?: string;
  disableCity?: boolean;
  disableDetailAddress?: boolean;
}

const AddressForm: React.FC<AddressFormProps> = ({
  form,
  prefix,
  initialCity,
  initialWard,
  initialDetail,
  disableCity,
  disableDetailAddress,
}) => {
  const [provinces, setProvinces] = useState<Province[]>([]);
  const [communes, setCommunes] = useState<Commune[]>([]);
  const [isFirstLoad, setIsFirstLoad] = useState(true);
  
  // S·ª¨A: Kh·ªüi t·∫°o useRef v·ªõi gi√° tr·ªã undefined
  const prevProvinceRef = useRef<number | undefined>(undefined);

  // üÜï Watch province theo prefix
  const selectedProvince = Form.useWatch([prefix, "province"], form);

  // L·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë
  useEffect(() => {
    axios
      .get<Province[]>("https://provinces.open-api.vn/api/v2/p/")
      .then((res) => setProvinces(res.data))
      .catch((err) => console.error(err));
  }, []);

  useEffect(() => {
    if (initialDetail) {
      form.setFieldsValue({
        [prefix]: {
          ...form.getFieldValue(prefix),
          address: initialDetail,
        },
      });
    }
  }, [initialDetail, form, prefix]);

  interface ProvinceDetail {
    name: string;
    code: number;
    wards: {
      code: number;
      name: string;
      province_code: number;
    }[];
  }

  useEffect(() => {
    const provinceCode = selectedProvince || initialCity;
    
    if (provinceCode) {
      axios.get<ProvinceDetail>(`https://provinces.open-api.vn/api/v2/p/${provinceCode}?depth=2`)
        .then((res) => {
          const wards: Commune[] = (res.data.wards || []).map(w => ({ code: w.code, name: w.name }));
          setCommunes(wards);

          // ‚úÖ N·∫øu c√≥ initialWard V√Ä ƒëang l√† l·∫ßn ƒë·∫ßu load, set commune
          if (initialWard && isFirstLoad) {
            form.setFieldsValue({
              [prefix]: {
                ...form.getFieldValue(prefix),
                commune: initialWard,
              }
            });
            setIsFirstLoad(false);
          }

        })
        .catch(err => console.error(err));
    } else {
      // üîÑ Reset communes khi kh√¥ng c√≥ province
      setCommunes([]);
    }
  }, [selectedProvince, initialCity, initialWard, form, prefix, isFirstLoad]);

  // üîÑ QUAN TR·ªåNG: Reset ward khi province thay ƒë·ªïi (ch·ªâ khi KH√îNG ph·∫£i l·∫ßn ƒë·∫ßu)
  useEffect(() => {
    if (selectedProvince && selectedProvince !== prevProvinceRef.current) {
      // Ch·ªâ reset khi province th·ª±c s·ª± thay ƒë·ªïi, kh√¥ng ph·∫£i l·∫ßn ƒë·∫ßu load
      if (!isFirstLoad && prevProvinceRef.current !== undefined) {
        form.setFieldsValue({
          [prefix]: {
            ...form.getFieldValue(prefix),
            commune: undefined,
          }
        });
      }
      
      // Clear communes list (s·∫Ω ƒë∆∞·ª£c set l·∫°i trong useEffect tr√™n)
      setCommunes([]);
      prevProvinceRef.current = selectedProvince;
    }
  }, [selectedProvince, form, prefix, isFirstLoad]);

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng thay ƒë·ªïi province th·ªß c√¥ng
  const handleProvinceChange = (newProvince: number) => {
    // Reset commune khi ng∆∞·ªùi d√πng ch·ªçn province m·ªõi
    form.setFieldsValue({
      [prefix]: {
        ...form.getFieldValue(prefix),
        commune: undefined,
      }
    });
    setCommunes([]);
    setIsFirstLoad(false);
  };

  return (
    <>
      <Form.Item
        name={[prefix, "province"]}
        label="T·ªânh / Th√†nh ph·ªë"
        rules={[{ required: true, message: "Ch·ªçn t·ªânh / th√†nh ph·ªë!" }]}
      >
        <Select
          showSearch
          placeholder="Ch·ªçn t·ªânh/th√†nh ph·ªë"
          optionFilterProp="label"
          disabled={disableCity}
          onChange={handleProvinceChange}
          filterOption={(input, option) =>
            (option?.label as string)
              .toLowerCase()
              .includes(input.toLowerCase())
          }
        >
          {provinces.map((p) => (
            <Option key={p.code} value={p.code} label={p.name}>
              {p.name}
            </Option>
          ))}
        </Select>
      </Form.Item>

      <Form.Item
        name={[prefix, "commune"]}
        label="Ph∆∞·ªùng / X√£"
        rules={[{ required: true, message: "Ch·ªçn ph∆∞·ªùng / x√£!" }]}
      >
        <Select
          showSearch
          placeholder={"Ch·ªçn ph∆∞·ªùng/x√£"}
          optionFilterProp="label"
          filterOption={(input, option) =>
            (option?.label as string)
              .toLowerCase()
              .includes(input.toLowerCase())
          }
          disabled={!selectedProvince}
        >
          {communes.map((c) => (
            <Option key={c.code} value={c.code} label={c.name}>
              {c.name}
            </Option>
          ))}
        </Select>
      </Form.Item>

      <Form.Item
        name={[prefix, "address"]}
        label="Chi ti·∫øt"
        rules={[{ required: true, message: "Nh·∫≠p s·ªë nh√†, t√™n ƒë∆∞·ªùng!" }]}
      >
        <Input placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng..." disabled={disableDetailAddress} />
      </Form.Item>
    </>
  );
};

export default AddressForm;